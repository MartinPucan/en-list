{"version":3,"sources":["components/Header/Header.js","components/TableWords/Columns.js","components/TableWords/TableWordsSorting.js","components/TableWords/TableInfo.js","components/Layout/Layout.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","type","placeholder","aria-label","GROUPS_OF_COLUMNS","columns","accessor","TableWordsSorting","useMemo","data","WORDS","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","TableInfo","numberOfWords","Object","keys","length","role","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"mNAoBeA,EAlBA,WACX,OACI,iCACI,sBAAKC,UAAU,kFAAf,UACI,8BACI,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,6BAEJ,8BACI,uBAAMD,UAAU,2BAAhB,UACI,uBAAOA,UAAU,uBAAuBE,KAAK,SAASC,YAAY,SAASC,aAAW,WACtF,wBAAQJ,UAAU,uCAAuCE,KAAK,SAA9D,+B,cCOXG,EAAoB,CAC7B,CACIN,OAAQ,QACRO,QAAS,CACL,CACIP,OAAQ,UACRQ,SAAU,WAEd,CACIR,OAAQ,QACRQ,SAAU,WAItB,CACIR,OAAQ,cACRO,QAAS,CACL,CACIP,OAAQ,aACRQ,SAAU,cAEd,CACIR,OAAQ,UACRQ,SAAU,c,OCkBXC,EAvDW,WAEtB,IAAMF,EAAUG,mBAAQ,kBAAMJ,IAAmB,IAC3CK,EAAOD,mBAAQ,kBAAME,IAAO,IAHN,EAWxBC,mBAAS,CACTN,UACAI,QAEAG,aATAC,EANwB,EAMxBA,cACAC,EAPwB,EAOxBA,kBACAC,EARwB,EAQxBA,aACAC,EATwB,EASxBA,KACAC,EAVwB,EAUxBA,WAOJ,OACI,yBAASlB,UAAU,mBAAnB,SACI,kDAAWc,GAAX,IAA0Bd,UAAU,gDAApC,UACI,gCACKgB,EAAaG,KAAI,SAACC,GAAD,OACd,8CAAQA,EAAYC,uBAApB,aACKD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACrB,+CAAQA,EAAOC,eAAeD,EAAOE,uBAArC,cACKF,EAAOG,OAAO,UACf,+BACKH,EAAOI,SAAYJ,EAAOK,aAAe,UAAO,UAAQ,oBAOjF,iDAAWb,KAAX,aAEQE,EAAKE,KAAI,SAACU,GAEN,OADAX,EAAWW,GAEP,8CAAQA,EAAIC,eAAZ,aAEQD,EAAIE,MAAMZ,KAAI,SAACa,GACX,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKN,OAAO,8BCjC9EQ,EAXG,WAEd,IAAIC,EAAgBC,OAAOC,KAAK1B,GAAO2B,OAEvC,OACI,sBAAKtC,UAAU,kCAAkCuC,KAAK,QAAtD,4BACoBJ,EADpB,aCSOK,EAZA,WACX,OACI,qCACI,cAAC,EAAD,IACA,uBAAMxC,UAAU,YAAhB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,WCFDyC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASzB,OACP,cAAC,IAAM0B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.0f3b3e43.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n    return(\n        <header>\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark d-flex justify-content-between mb-3\">\n                <div>\n                    <a className=\"navbar-brand\" href=\"/\">English words</a>\n                </div>\n                <div>\n                    <form className=\"form-inline my-2 my-lg-0\">\n                        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                    </form>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","export const COLUMNS = [\n    {\n        Header: 'English',\n        accessor: 'english'\n    },\n    {\n        Header: 'Czech',\n        accessor: 'czech'\n    },\n    {\n        Header: 'Definition',\n        accessor: 'definition'\n    },\n    {\n        Header: 'Example',\n        accessor: 'example'\n    }\n];\n\nexport const GROUPS_OF_COLUMNS = [\n    {\n        Header: 'Words',\n        columns: [\n            {\n                Header: 'English',\n                accessor: 'english'\n            },\n            {\n                Header: 'Czech',\n                accessor: 'czech'\n            },\n        ]\n    },\n    {\n        Header: 'Explanation',\n        columns: [\n            {\n                Header: 'Definition',\n                accessor: 'definition'\n            },\n            {\n                Header: 'Example',\n                accessor: 'example'\n            }\n        ]\n    }\n]","import React, { useMemo } from 'react';\nimport { useTable, useSortBy } from \"react-table\";\nimport { GROUPS_OF_COLUMNS } from \"./Columns\";\nimport WORDS from \"./Words.json\";\n\nconst TableWordsSorting = () => {\n\n    const columns = useMemo(() => GROUPS_OF_COLUMNS, [])\n    const data = useMemo(() => WORDS, [])\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n    } = useTable({\n        columns,\n        data\n    },\n        useSortBy)\n\n    return (\n        <section className=\"table-responsive\">\n            <table {...getTableProps} className=\"table table-striped table-bordered table-dark\">\n                <thead >\n                    {headerGroups.map((headerGroup) => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column) => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps)}>\n                                    {column.render('Header')}\n                                    <span>\n                                        {column.isSorted ? (column.isSortedDesc ? ' ↓' : ' ↑') : ''}\n                                    </span>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {\n                        rows.map((row) => {\n                            prepareRow(row)\n                            return(\n                                <tr {...row.getRowProps()}>\n                                    {\n                                        row.cells.map((cell) => {\n                                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </section>\n    );\n}\n\nexport default TableWordsSorting;","import React from \"react\";\nimport WORDS from \"./Words.json\";\n\nconst TableInfo = () => {\n\n    let numberOfWords = Object.keys(WORDS).length;\n\n    return(\n        <div className=\"alert alert-primary text-center\" role=\"alert\">\n            Table contains {numberOfWords} words\n        </div>\n    )\n}\n\nexport default TableInfo;","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport TableWordsSorting from \"../TableWords/TableWordsSorting\";\nimport TableInfo from \"../TableWords/TableInfo\";\n\nconst Layout = () => {\n    return(\n        <>\n            <Header />\n            <main className=\"container\">\n                <TableInfo />\n                <TableWordsSorting />\n            </main>\n        </>\n    )\n}\n\nexport default Layout;","import '../App.css';\nimport Layout from './Layout/Layout';\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}